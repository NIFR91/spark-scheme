(import (sunit))

(let ((a (amb 1 2))
      (b (amb 1 2)))
  (amb-require (< a b))
  (printf "~a~n" (list a b)))

(define (multiple-dwelling)
  (let ((baker (amb 1 2 3 4 5))
	(cooper (amb 1 2 3 4 5))
	(fletcher (amb 1 2 3 4 5))
	(miller (amb 1 2 3 4 5))
	(smith (amb 1 2 3 4 5)))
    (amb-require
     (unique? (list baker cooper fletcher miller smith)))
    (amb-require (not (= baker 5)))
    (amb-require (not (= cooper 1)))
    (amb-require (not (= fletcher 5)))
    (amb-require (not (= fletcher 1)))
    (amb-require (> miller cooper))
    (amb-require (not (= (abs (- smith fletcher)) 1)))
    (amb-require (not (= (abs (- fletcher cooper)) 1)))
    (list (list 'baker baker)
	  (list 'cooper cooper)
	  (list 'fletcher fletcher)
	  (list 'miller miller)
	  (list 'smith smith))))

(multiple-dwelling)
