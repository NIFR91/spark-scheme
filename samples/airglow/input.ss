(import (airglow) ((prefix spark.fltk- #%spark-fltk)))

(define argv (list "input.ss"))
(spark.fltk-args argv)
(spark.fltk-get-system-colors)

(define window (window 'w 400 'h 400))

(define y 0)
(define inputs (make-vector 5))
(define input (input-field 'x 70 'y y 'w 300 'h 30 'title "Normal:"))
(widget-tooltip! input "Normal input field")
(vector-set! inputs 0 input)
(set! y (+ y 35))
(set! input (input-field 'x 70 'y y 'w 300 'h 30 
			 'title "Float:" 'type 'float))
(vector-set! inputs 1 input)
(set! y (+ y 35))
(widget-tooltip! input "Input field for floating-point number")
(set! y (+ y 35))
(set! input (input-field 'x 70 'y y 'w 300 'h 30 'title "Int:" 'type 'int))
(widget-tooltip! input "Input field for integer number")
(vector-set! inputs 2 input)
(set! y (+ y 35))
(set! input (input-field 'x 70 'y y 'w 300 'h 30 'title "Password:" 'type 'secret))
(widget-tooltip! input "Input field for password")
(vector-set! inputs 3 input)
(set! y (+ y 35))
(set! input (input-field 'x 70 'y y 'w 300 'h 100 'title "Multiline:" 'type 'multiline))
(widget-tooltip! input "Input field for short text with newlines")
(input-field-wrap! input 'on)
(vector-set! inputs 4 input)
(set! y (+ y 105))

(define tmp y)

(define (cb b a)
  (print (input-field-value b)) (newline))

(let loop ((i 0))
  (set! input (vector-ref inputs i))
  (widget-callback! input cb)
  (widget-callback-when! input 'never)
  (if (< i 4)
      (begin
	(set! i (+ i 1))
	(loop i))))

(define (toggle-cb b a)
  (let loop ((i 0))
    (set! input (vector-ref inputs i))
    (if (button-toggled? b)
	(widget-callback-when! input a 'add)
	(widget-callback-when! input a 'remove))
    (if (< i 4)
	(begin
	  (set! i (+ i 1))
	  (loop i)))))

(define (button-cb b a) null)

(define b (button 'x 10 'y y 'w 200 'h 25 'title "WHEN_CHANGED" 'type 'toggle))
(widget-callback! b toggle-cb 'changed)
(widget-tooltip! b "Do callback each time the text changes")
(set! y (+ y 25))
(set! b (button 'x 10 'y y 'w 200 'h 25 'title "WHEN_RELEASE" 'type 'toggle))
(widget-callback! b toggle-cb 'release)
(widget-tooltip! b "Do callback when widget loses focus")
(set! y (+ y 25))
(set! b (button 'x 10 'y y 'w 200 'h 25 'title "WHEN_ENTER_KEY" 'type 'toggle))
(widget-callback! b toggle-cb 'enter-key)
(widget-tooltip! b "Do callback when user hits Enter key")
(set! y (+ y 25))
(set! b (button 'x 10 'y y 'w 200 'h 25 'title "WHEN_NOT_CHANGED" 'type 'toggle))
(widget-callback! b toggle-cb 'not-changed)
(widget-tooltip! b "Do callback when text not changed")
(set! y (+ y 25))
(set! b (button 'x 10 'y y 'w 200 'h 25 'title "&Print changed" 'type 'normal))
(widget-callback! b button-cb)
(widget-tooltip! b "Print widgets that have changed flag set")
(set! y (+ y 5))

(define (color-cb b a)
  (collect-garbage)
  (let ((c 0) (colors null) (color null))
    (cond
     ((= a 1) (set! c 'background2))
     ((= a 2) (set! c 'selection))
     ((= a 3) (set! c 'foreground)))
    (set! colors (color-chooser-color c))
    (set! colors (color-chooser-show "" colors))
    (set! color (color-chooser-color! c colors))
    (widget-label-color! b (airglow-contrast 'black color))
    (airglow-redraw-all)
    (widget-redraw b)))

(set! y tmp)
(set! b (button 'x 220 'y y 'w 100 'h 25 'title "color" 'type 'normal))
(widget-callback! b color-cb 1)
(widget-bg-color! b (widget-bg-color (vector-ref inputs 0)))
(widget-tooltip! b "Color behind the text")
(set! y (+ y 25))
(set! b (button 'x 220 'y y 'w 100 'h 25 'title "selection_color" 'type 'normal))
(widget-callback! b color-cb 2)
(widget-bg-color! b (widget-selection-color(vector-ref inputs 0)))
(widget-label-color! b (airglow-contrast 'black (widget-bg-color b)))
(widget-tooltip! b "Color behind selected text")
(set! y (+ y 25))
(set! b (button 'x 220 'y y 'w 100 'h 25 'title "textcolor" 'type 'normal))
(widget-callback! b color-cb 3)
(widget-bg-color! b (input-field-text-color(vector-ref inputs 0)))
(widget-label-color! b (airglow-contrast 'black (widget-bg-color b)))
(widget-tooltip! b "Color of the text")


(group-finish window)
(window-show window)
(airglow-run)
