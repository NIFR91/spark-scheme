(import (net) (reactor))

(define (on-client-connect acceptor client-conn)
  (printf "Client connected.~n") (flush-output)
  (let ((client-socket (car client-conn)))
    (acceptor-add-watch acceptor client-socket 'for-read)))
    
(define (on-client-read acceptor client-socket)
  (printf "Client requesting current time ... ~n")
  (flush-output)
  (newline)
  (let ((dt (seconds->date (current-seconds)))
	(out (open-output-string)))
    (fprintf out "~a:~a:~a" 
	     (date-hour dt) 
	     (date-minute dt)
	     (date-second dt))
    (socket-send client-socket (get-output-string out)))
  (acceptor-remove-watch acceptor client-socket 'for-read)
  (socket-close client-socket))

(define (on-server-timeout acceptor)
  (printf "Waiting for client, timedout.~n")
  (flush-output))

(define time-server (socket-acceptor))
(acceptor-port! time-server 7070)
(acceptor-on-client-connect! time-server on-client-connect)
(acceptor-on-client-read! time-server on-client-read)
(acceptor-on-server-timeout! time-server on-server-timeout)
(acceptor-open time-server #t (list 10 0))
(define count 0)
(let loop ()
  (acceptor-watch time-server)
  (if (< count 10)
      (begin
	(set! count (+ count 1))
	(loop))))      
(printf "Time server exiting ...~n") (flush-output)
(acceptor-close time-server)
